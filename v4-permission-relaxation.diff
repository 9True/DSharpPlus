diff --git a/DSharpPlus/Entities/Channel/DiscordChannel.cs b/DSharpPlus/Entities/Channel/DiscordChannel.cs
index 21d136d8..0fb8f28a 100644
--- a/DSharpPlus/Entities/Channel/DiscordChannel.cs
+++ b/DSharpPlus/Entities/Channel/DiscordChannel.cs
@@ -236,6 +236,7 @@ namespace DSharpPlus.Entities
         /// <para>Only sent on the resolved channels of interaction responses for application commands.</para>
         /// </summary>
         [JsonProperty("permissions")]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions? UserPermissions { get; internal set; }
 
         internal DiscordChannel()
diff --git a/DSharpPlus/Entities/Channel/Overwrite/DiscordOverwrite.cs b/DSharpPlus/Entities/Channel/Overwrite/DiscordOverwrite.cs
index 134d6dbc..a890b5e4 100644
--- a/DSharpPlus/Entities/Channel/Overwrite/DiscordOverwrite.cs
+++ b/DSharpPlus/Entities/Channel/Overwrite/DiscordOverwrite.cs
@@ -23,6 +23,7 @@
 
 using System;
 using System.Threading.Tasks;
+using DSharpPlus.Net.Serialization;
 using Newtonsoft.Json;
 
 namespace DSharpPlus.Entities
@@ -42,12 +43,14 @@ namespace DSharpPlus.Entities
         /// Gets the allowed permission set.
         /// </summary>
         [JsonProperty("allow", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions Allowed { get; internal set; }
 
         /// <summary>
         /// Gets the denied permission set.
         /// </summary>
         [JsonProperty("deny", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions Denied { get; internal set; }
 
         [JsonIgnore]
diff --git a/DSharpPlus/Entities/Channel/Overwrite/DiscordOverwriteBuilder.cs b/DSharpPlus/Entities/Channel/Overwrite/DiscordOverwriteBuilder.cs
index 22bd400c..5c0a2974 100644
--- a/DSharpPlus/Entities/Channel/Overwrite/DiscordOverwriteBuilder.cs
+++ b/DSharpPlus/Entities/Channel/Overwrite/DiscordOverwriteBuilder.cs
@@ -23,6 +23,7 @@
 
 using System;
 using System.Threading.Tasks;
+using DSharpPlus.Net.Serialization;
 using Newtonsoft.Json;
 
 namespace DSharpPlus.Entities
@@ -158,9 +159,11 @@ namespace DSharpPlus.Entities
     internal struct DiscordRestOverwrite
     {
         [JsonProperty("allow", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         internal Permissions Allow { get; set; }
 
         [JsonProperty("deny", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         internal Permissions Deny { get; set; }
 
         [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
diff --git a/DSharpPlus/Entities/Guild/DiscordGuild.cs b/DSharpPlus/Entities/Guild/DiscordGuild.cs
index aeeaa3e0..2b8f57ac 100644
--- a/DSharpPlus/Entities/Guild/DiscordGuild.cs
+++ b/DSharpPlus/Entities/Guild/DiscordGuild.cs
@@ -109,6 +109,7 @@ namespace DSharpPlus.Entities
         /// Gets permissions for the user in the guild (does not include channel overrides)
         /// </summary>
         [JsonProperty("permissions", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions? Permissions { get; set; }
 
         /// <summary>
diff --git a/DSharpPlus/Entities/Guild/DiscordRole.cs b/DSharpPlus/Entities/Guild/DiscordRole.cs
index 9ae6a145..880c2780 100644
--- a/DSharpPlus/Entities/Guild/DiscordRole.cs
+++ b/DSharpPlus/Entities/Guild/DiscordRole.cs
@@ -27,6 +27,7 @@ using System.Linq;
 using System.Threading.Tasks;
 using DSharpPlus.Net.Abstractions;
 using DSharpPlus.Net.Models;
+using DSharpPlus.Net.Serialization;
 using Newtonsoft.Json;
 
 namespace DSharpPlus.Entities
@@ -87,6 +88,7 @@ namespace DSharpPlus.Entities
         /// Gets the permissions set for this role.
         /// </summary>
         [JsonProperty("permissions", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions Permissions { get; internal set; }
 
         /// <summary>
diff --git a/DSharpPlus/Entities/Interaction/Application/DiscordApplicationCommand.cs b/DSharpPlus/Entities/Interaction/Application/DiscordApplicationCommand.cs
index 776f34af..cc1110a6 100644
--- a/DSharpPlus/Entities/Interaction/Application/DiscordApplicationCommand.cs
+++ b/DSharpPlus/Entities/Interaction/Application/DiscordApplicationCommand.cs
@@ -26,6 +26,7 @@ using System.Collections.Generic;
 using System.Collections.ObjectModel;
 using System.Globalization;
 using System.Linq;
+using DSharpPlus.Net.Serialization;
 using Newtonsoft.Json;
 
 namespace DSharpPlus.Entities
@@ -81,6 +82,7 @@ namespace DSharpPlus.Entities
         /// What permissions this command requires to be invoked.
         /// </summary>
         [JsonProperty("default_member_permissions")]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions? DefaultMemberPermissions { get; internal set; }
 
 
diff --git a/DSharpPlus/Net/Abstractions/Rest/RestApplicationCommandPayloads.cs b/DSharpPlus/Net/Abstractions/Rest/RestApplicationCommandPayloads.cs
index 4c7607c6..99d192aa 100644
--- a/DSharpPlus/Net/Abstractions/Rest/RestApplicationCommandPayloads.cs
+++ b/DSharpPlus/Net/Abstractions/Rest/RestApplicationCommandPayloads.cs
@@ -23,6 +23,7 @@
 
 using System.Collections.Generic;
 using DSharpPlus.Entities;
+using DSharpPlus.Net.Serialization;
 using Newtonsoft.Json;
 
 namespace DSharpPlus.Net.Abstractions
@@ -54,8 +55,8 @@ namespace DSharpPlus.Net.Abstractions
         public bool? AllowDMUsage { get; set; }
 
         [JsonProperty("default_member_permissions", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions? DefaultMemberPermissions { get; set; }
-
     }
 
     internal class RestApplicationCommandEditPayload
diff --git a/DSharpPlus/Net/Abstractions/Rest/RestChannelPayloads.cs b/DSharpPlus/Net/Abstractions/Rest/RestChannelPayloads.cs
index 243d3b50..5a0b802e 100644
--- a/DSharpPlus/Net/Abstractions/Rest/RestChannelPayloads.cs
+++ b/DSharpPlus/Net/Abstractions/Rest/RestChannelPayloads.cs
@@ -24,6 +24,7 @@
 using System;
 using System.Collections.Generic;
 using DSharpPlus.Entities;
+using DSharpPlus.Net.Serialization;
 using Newtonsoft.Json;
 
 namespace DSharpPlus.Net.Abstractions
@@ -287,9 +288,11 @@ namespace DSharpPlus.Net.Abstractions
     internal sealed class RestChannelPermissionEditPayload
     {
         [JsonProperty("allow", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions Allow { get; set; }
 
         [JsonProperty("deny", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions Deny { get; set; }
 
         [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
diff --git a/DSharpPlus/Net/Abstractions/Rest/RestGuildPayloads.cs b/DSharpPlus/Net/Abstractions/Rest/RestGuildPayloads.cs
index 77c107bc..e9d1ae4d 100644
--- a/DSharpPlus/Net/Abstractions/Rest/RestGuildPayloads.cs
+++ b/DSharpPlus/Net/Abstractions/Rest/RestGuildPayloads.cs
@@ -24,6 +24,7 @@
 using System;
 using System.Collections.Generic;
 using DSharpPlus.Entities;
+using DSharpPlus.Net.Serialization;
 using Newtonsoft.Json;
 
 namespace DSharpPlus.Net.Abstractions
@@ -261,6 +262,7 @@ namespace DSharpPlus.Net.Abstractions
         public string Name { get; set; }
 
         [JsonProperty("permissions", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions? Permissions { get; set; }
 
         [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
diff --git a/DSharpPlus/Net/Abstractions/Rest/RestUserPayloads.cs b/DSharpPlus/Net/Abstractions/Rest/RestUserPayloads.cs
index 1a1bbb32..10e2ac2b 100644
--- a/DSharpPlus/Net/Abstractions/Rest/RestUserPayloads.cs
+++ b/DSharpPlus/Net/Abstractions/Rest/RestUserPayloads.cs
@@ -22,6 +22,7 @@
 // SOFTWARE.
 
 using System.Collections.Generic;
+using DSharpPlus.Net.Serialization;
 using Newtonsoft.Json;
 
 namespace DSharpPlus.Net.Abstractions
@@ -71,6 +72,7 @@ namespace DSharpPlus.Net.Abstractions
         public bool IsOwner { get; set; }
 
         [JsonProperty("avatar", NullValueHandling = NullValueHandling.Ignore)]
+        [JsonConverter(typeof(DiscordPermissionsJsonConverter))]
         public Permissions Permissions { get; set; }
     }
 
diff --git a/DSharpPlus/Net/Serialization/DiscordJson.cs b/DSharpPlus/Net/Serialization/DiscordJson.cs
index 67db38ad..e09b405e 100644
--- a/DSharpPlus/Net/Serialization/DiscordJson.cs
+++ b/DSharpPlus/Net/Serialization/DiscordJson.cs
@@ -37,7 +37,7 @@ namespace DSharpPlus.Net.Serialization
         {
             ContractResolver = new OptionalJsonContractResolver(),
             DateParseHandling = DateParseHandling.None,
-            Converters = new[] { new ISO8601DateTimeOffsetJsonConverter() }
+            Converters = new JsonConverter[] { new ISO8601DateTimeOffsetJsonConverter(), new DiscordPermissionsJsonConverter() }
         });
 
         /// <summary>Serializes the specified object to a JSON string.</summary>
diff --git a/DSharpPlus/Net/Serialization/DiscordPermissionsJsonConverter.cs b/DSharpPlus/Net/Serialization/DiscordPermissionsJsonConverter.cs
new file mode 100644
index 00000000..73d73eda
--- /dev/null
+++ b/DSharpPlus/Net/Serialization/DiscordPermissionsJsonConverter.cs
@@ -0,0 +1,45 @@
+// This file is part of the DSharpPlus project.
+//
+// Copyright (c) 2015 Mike Santiago
+// Copyright (c) 2016-2023 DSharpPlus Contributors
+//
+// Permission is hereby granted, free of charge, to any person obtaining a copy
+// of this software and associated documentation files (the "Software"), to deal
+// in the Software without restriction, including without limitation the rights
+// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+// copies of the Software, and to permit persons to whom the Software is
+// furnished to do so, subject to the following conditions:
+//
+// The above copyright notice and this permission notice shall be included in all
+// copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+// SOFTWARE.
+
+using System;
+using System.Globalization;
+using System.Numerics;
+using Newtonsoft.Json;
+using Newtonsoft.Json.Linq;
+
+namespace DSharpPlus.Net.Serialization
+{
+    internal class DiscordPermissionsJsonConverter : JsonConverter<Permissions>
+    {
+        public override Permissions ReadJson(JsonReader reader, Type objectType, Permissions existingValue, bool hasExistingValue, JsonSerializer serializer)
+        {
+            var token = JToken.Load(reader);
+            var value = token.ToObject<BigInteger>();
+
+            return (Permissions)(ulong)(value & ulong.MaxValue);
+        }
+
+        public override void WriteJson(JsonWriter writer, Permissions value, JsonSerializer serializer)
+            => writer.WriteValue(((ulong)value).ToString(CultureInfo.InvariantCulture));
+    }
+}
